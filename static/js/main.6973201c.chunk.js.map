{"version":3,"sources":["SortingVisualizer/Swap.jsx","SortingVisualizer/BubbleSort.js","SortingVisualizer/SelectionSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["swap","arrayCopy","i","j","tempArr","bubbleSortAnimations","array","animations","slice","sorted","arrayCopyLength","length","push","bubbleSortHelper","selectionSortAnimations","minIdx","selectionSortHelper","SortingVisualizer","props","state","newheight","this","resetArray","min","max","Math","floor","random","setState","arrayBars","document","getElementsByClassName","color","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barIdx","newHeight","height","className","map","value","id","key","Button","onClick","variant","bubbleSort","selectionSort","quickSort","mergeSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTAUeA,G,MAPF,SAACC,EAAUC,EAAEC,GACtB,IAAMC,EAAUH,EAAUC,GAC1BD,EAAUC,GAAKD,EAAUE,GACzBF,EAAUE,GAAKC,ICHZ,SAASC,EAAqBC,GAEnC,IAAIC,EAAa,GACbN,EAAYK,EAAME,QAKtB,OAGF,SAA0BP,EAAWM,GAEnC,IACIE,EADAC,EAAkBT,EAAUU,OAAQ,EAExC,KAAMD,GACN,CACED,GAAQ,EACR,IAAI,IAAIP,EAAI,EAAIA,EAAIQ,EAAiBR,IACjCK,EAAWK,KAAK,CAAC,eAAeV,EAAEA,EAAE,IACpCK,EAAWK,KAAK,CAAC,eAAiBV,EAAEA,EAAE,IACnCD,EAAUC,GAAKD,EAAUC,EAAE,KAC5BO,GAAS,EACTF,EAAWK,KAAK,CAAC,OAAOV,EAAID,EAAUC,EAAE,KACxCK,EAAWK,KAAK,CAAC,OAAOV,EAAE,EAAID,EAAUC,KACxCF,EAAKC,EAAYC,EAAGA,EAAI,IAG9B,IAAY,IAATO,EACD,MACFC,KAzBFG,CAAiBZ,EAAUM,GAGpB,CAACA,EADRD,EAAQL,GCPH,SAASa,EAAwBR,GAEpC,IAAIC,EAAa,GACbN,EAAYK,EAAME,QAMtB,OAGJ,SAA6BP,EAAUM,GAGnC,IAFA,IAAIQ,EAEIb,EAAI,EAAIA,EAAED,EAAUU,OAAO,IAAMT,EAAE,CACvCa,EAASb,EACT,IAAK,IAAIC,EAAID,EAAE,EAAIC,EAAIF,EAAUU,SAAUR,EACvCI,EAAWK,KAAK,CAAC,QAAST,EAAIY,IAC9BR,EAAWK,KAAK,CAAC,QAAST,EAAGY,IAE1Bd,EAAUE,GAAKF,EAAUc,KACxBA,EAASZ,GAIjBI,EAAWK,KAAK,CAAC,OAASG,EAASd,EAAUC,KAC7CK,EAAWK,KAAK,CAAC,OAASV,EAAID,EAAUc,KAExCf,EAAKC,EAAUc,EAAOb,IAxB1Bc,CAAoBf,EAAUM,GAIvB,CAACA,EAFRD,EAAQL,GCHZ,IAMqBgB,E,kDACjB,WAAaC,GAAO,IAAD,8BACf,cAAOA,IAEFC,MAAQ,CACTb,MAAO,GACPc,UAAW,GALA,E,gEAafC,KAAKC,e,mCAOL,IADA,IAiHuBC,EAAIC,EAjHrBlB,EAAQ,GACNJ,EAAI,EAAIA,EAAE,KAAMA,EACrBI,EAAMM,MA+GcW,EA/Ga,EA+GTC,EA/GW,IAgHnCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAMA,KA7GjDF,KAAKO,SAAS,CAACtB,Y,mCAOf,IAHH,IAAD,EACqCD,EAAqBgB,KAAKF,MAAMb,OADrE,mBACWC,EADX,sBAGYL,GAEN,IAAM2B,EAAYC,SAASC,uBAAuB,YAGlD,GAF4C,iBAArBxB,EAAWL,GAAG,IAAgD,iBAArBK,EAAWL,GAAG,GAE3D,CACjB,IAAM8B,EAA8B,iBAArBzB,EAAWL,GAAG,GAxCjB,MAFF,UAyCO,cAGmBK,EAAWL,GAH9B,GAGL+B,GAHK,WAGMC,EAHN,KAIXC,EAAcN,EAAUI,GAAWG,MACnCC,EAAcR,EAAUK,GAAWE,MACzCE,YAAW,WACTH,EAAYI,gBAAkBP,EAC9BK,EAAYE,gBAAkBP,IAnDjB,IAoDZ9B,QAEHoC,YAAW,WAAO,IAAD,cACkB/B,EAAWL,GAD7B,GACHsC,GADG,WACKC,EADL,KAEAZ,EAAUW,GAAQJ,MACxBM,OAAT,UAAqBD,EAArB,QAzDa,IA4DZvC,KAtBCA,EAAI,EAAIA,EAAIK,EAAWI,SAAUT,EACxC,EADOA,K,sCAsCR,IAPW,MAKsBY,EAAwBO,KAAKF,MAAMb,OALzD,mBAKJC,EALI,sBAOHL,GAIN,IAAM2B,EAAYC,SAASC,uBAAuB,YAGlD,GAF4C,UAArBxB,EAAWL,GAAG,IAAyC,UAArBK,EAAWL,GAAG,GAEpD,CAEjB,IAAM8B,EAA8B,UAArBzB,EAAWL,GAAG,GAjFjB,MAFF,UAiFO,cAKmBK,EAAWL,GAL9B,GAKL+B,GALK,WAKMC,EALN,KAMXC,EAAcN,EAAUI,GAAWG,MACnCC,EAAcR,EAAUK,GAAWE,MACzCE,YAAW,WACTH,EAAYI,gBAAkBP,EAC9BK,EAAYE,gBAAkBP,IA7FjB,IA8FZ9B,QAGHoC,YAAW,WAAO,IAAD,cACoB/B,EAAWL,GAD/B,GACDsC,GADC,WACOC,EADP,KAEIZ,EAAUW,GAAQJ,MACzBM,OAAT,UAAqBD,EAArB,QApGU,IAqGZvC,KAzBCA,EAAI,EAAIA,EAAIK,EAAWI,SAAUT,EACxC,EADOA,K,+BAsCH,IAAD,OAGJ,OACI,yBAAKyC,UAAU,kBACdtB,KAAKF,MAAMb,MAAMsC,KAAI,SAACC,EAAMC,GAAP,OAClB,yBAAKH,UAAY,WAAWI,IAAMD,EAAIV,MAAS,CAACG,gBAtH1C,UAsH0EG,OAAO,GAAD,OAAKG,EAAL,YAK1F,6BACA,kBAACG,EAAA,EAAD,CAAQL,UAAU,mBAAoBM,QAAW,kBAAI,EAAK3B,eAA1D,sBACA,kBAAC0B,EAAA,EAAD,CAASL,UAAY,aAAaO,QAAU,OAAOD,QAAW,kBAAI,EAAKE,eAAvE,eACA,kBAACH,EAAA,EAAD,CAASL,UAAY,gBAAiBO,QAAU,OAAOD,QAAW,kBAAI,EAAKG,kBAA3E,kBACA,kBAACJ,EAAA,EAAD,CAASL,UAAY,YAAaO,QAAU,OAAOD,QAAW,kBAAI,EAAKI,cAAvE,cACA,kBAACL,EAAA,EAAD,CAASL,UAAY,YAAaO,QAAU,OAAOD,QAAW,kBAAI,EAAKK,cAAvE,oB,GA5HmCC,IAAMC,W,MCAtCC,MARf,WACE,OACE,yBAAKd,UAAU,OACf,kBAAC,EAAD,QCIgBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASoC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6973201c.chunk.js","sourcesContent":["\nimport React from 'react'\n\nconst swap = (arrayCopy,i,j) => {\n    const tempArr = arrayCopy[i];\n    arrayCopy[i] = arrayCopy[j];\n    arrayCopy[j] = tempArr;\n}\n\n\nexport default swap;\n","\nimport swap from './Swap.jsx'\n\nexport function bubbleSortAnimations(array)\n{\n  let animations = [];\n  let arrayCopy = array.slice();\n\n  bubbleSortHelper(arrayCopy,animations)\n  \n  array = arrayCopy;\n  return [animations,array];\n}\n\nfunction bubbleSortHelper(arrayCopy, animations){\n\n  let arrayCopyLength = arrayCopy.length -1;\n  let sorted ;\n  while(arrayCopyLength)\n  { \n    sorted =false;\n    for(let i = 0 ; i < arrayCopyLength; i++){\n        animations.push([\"comparision1\",i,i+1]);\n        animations.push([\"comparision2\",  i,i+1]);\n        if(arrayCopy[i] > arrayCopy[i+1]){\n          sorted = true;\n          animations.push([\"swap\",i , arrayCopy[i+1]])\n          animations.push([\"swap\",i+1 , arrayCopy[i]])\n          swap(arrayCopy , i, i + 1)\n        }\n    }\n    if(sorted===false)\n      break;\n    arrayCopyLength--;\n  }\n\n}\n\n\n\n","import swap from './Swap.jsx';\n\n\nexport function selectionSortAnimations(array)\n{\n    let animations = [];\n    let arrayCopy = array.slice();\n\n    selectionSortHelper(arrayCopy,animations);\n\n    array = arrayCopy;\n\n    return [animations,array];\n}\n\nfunction selectionSortHelper(arrayCopy,animations){\n    let minIdx;\n\n    for(let i = 0 ; i<arrayCopy.length-1 ; ++i){\n        minIdx = i;\n        for( let j = i+1 ; j < arrayCopy.length; ++j){\n            animations.push([\"comp1\", j , minIdx])\n            animations.push([\"comp2\", j, minIdx])\n\n            if(arrayCopy[j] < arrayCopy[minIdx]){\n                minIdx = j ;\n            }\n\n        }\n        animations.push([\"swap\" , minIdx , arrayCopy[i]])   \n        animations.push([\"swap\" , i , arrayCopy[minIdx]])\n\n        swap(arrayCopy,minIdx,i)\n\n\n    }\n}","import React from 'react'\nimport Button from 'react-bootstrap/Button';\nimport './SortingVisualizer.css';\nimport {bubbleSortAnimations} from './BubbleSort.js';\nimport {selectionSortAnimations} from './SelectionSort.js';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1000;\n\nconst PRIMARY_COLOR = '#00ff55';\n\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor (props){\n        super (props);\n\n        this.state = {\n            array: [],\n            newheight: 0,\n        };\n\n        // this.resetArray = this.resetArray.bind(this);\n    }\n\n\n    componentDidMount(){\n        this.resetArray();\n\n    }\n    \n    resetArray(){\n        \n        const array = [];\n        for(let i = 0 ; i<10; ++i){\n           array.push(randomIntFromInterval(5,420));\n        }\n\n        this.setState({array});\n    }\n\n bubbleSort()\n    {\n        const [animations,sortedArray] = bubbleSortAnimations(this.state.array);\n        \n        for(let i = 0 ; i < animations.length; ++i)\n        {\n          const arrayBars = document.getElementsByClassName('arrayBar');\n          const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\")\n          // const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const color = (animations[i][0] === \"comparision1\"  ) ? SECONDARY_COLOR : PRIMARY_COLOR;\n            // const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            const [comp,barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color; \n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [comp,barIdx, newHeight] = animations[i];\n              let barStyle = arrayBars[barIdx].style;\n              barStyle.height = `${newHeight}px`;       \n              // return <div> {`${newHeight}`}</div>\n              // this.state.newheight = newHeight;\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n        \n        // // const sortedArrayInBuilt = this.state.array.slice().sort((a,b)=> a-b);\n    \n        // console.log(isEqual(sortedArrayInBuilt,sortedArray));\n    }\n   \n    selectionSort(){\n        // const sortedArrayInBuilt = this.state.array.slice().sort((a, b) => a - b);\n        //  const sortedArray = selectionSortAnimations(this.state.array);\n        //  console.log(isEqual(sortedArrayInBuilt,sortedArray));\n\n        const [animations,sortedArray] = selectionSortAnimations(this.state.array);\n        \n        for(let i = 0 ; i < animations.length; ++i)\n        {\n        //   const arrayBars = document.getElementsByClassName('arrayBar');\n        //   const isColorChange = (animations[i][0] === \"comp1\") || (animations[i][0] === \"comp2\") || (animations[i][0] === \"comp3\") \n          const arrayBars = document.getElementsByClassName('arrayBar');\n          const isColorChange = (animations[i][0] === \"comp1\") || (animations[i][0] === \"comp2\");\n          // const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            \n            const color = (animations[i][0] === \"comp1\" ) ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n            // const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            const [comp,barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color; \n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            \n            setTimeout(() => {\n                const [comp,barIdx, newHeight] = animations[i];\n                const barStyle = arrayBars[barIdx].style;\n                 barStyle.height = `${newHeight}px`;       \n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n        \n        // // const sortedArrayInBuilt = this.state.array.slice().sort((a,b)=> a-b);\n    \n        // console.log(isEqual(sortedArrayInBuilt,sortedArray));\n    }\n\n\n    \n\n\n    render(){\n        // const {array} = this.state;\n\n        return (\n            <div className=\"arrayContainer\" >\n            {this.state.array.map((value,id)=> (\n                <div className = \"arrayBar\" key ={id} style = {{backgroundColor: PRIMARY_COLOR, height: `${value}px`}}>\n                  \n                \n                </div>\n            ))}\n            <div>\n            <Button className=\"generateNewArray\"  onClick = {()=>this.resetArray()}>Generate New Array</Button>\n            <Button  className = \"bubbleSort\" variant = \"dark\" onClick = {()=>this.bubbleSort()}>Bubble Sort</Button>\n            <Button  className = \"selectionSort\"  variant = \"dark\" onClick = {()=>this.selectionSort()}>Selection Sort</Button>\n            <Button  className = \"quickSort\"  variant = \"dark\" onClick = {()=>this.quickSort()}>Quick Sort</Button>\n            <Button  className = \"mergeSort\"  variant = \"dark\" onClick = {()=>this.mergeSort()}>Merge Sort</Button>\n\n            </div>\n            </div>\n        );\n    }\n   \n}\n\nfunction randomIntFromInterval(min,max){\n    return Math.floor(Math.random() * (max - min + 1 ) + min);\n}\n\nfunction isEqual(array1, array2)\n{\n    if(array1.length !== array2.length)\n    {\n        return false;\n    }\n    for(let i = 0 ; i < array1.length; i++)\n    {\n        if(array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n    return true;\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}